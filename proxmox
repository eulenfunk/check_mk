#!/bin/bash
#/usr/lib/check_mk_agent/local

export LANG=de_DE.UTF-8

# updates
reboot=0
if [ -x  /var/run/reboot-required.pkgs ] ; then
  reboot=$(cat /var/run/reboot-required.pkgs|wc -l)
 fi
supdates=0
supdates=$(apt-get upgrade -s 2>/dev/null| grep ^Security |wc -l)
nupdates=0
nupdates=$(apt-get upgrade -s 2>/dev/null| grep ^Inst |wc -l)
echo "P Debian-Patchstatus SecurityUpdates-waiting=$supdates.0;0:0.5;0:1|RegularUpdates-waiting=$nupdates.0;0:10;0:15|Reboot-waiting=$reboot.0;0:0.5;0:1"


# Temperature sensors
TFILE="/tmp/$(basename $0).$$.tmp"
/usr/bin/sensors > $TFILE
temper="P LMsensors "
while read line; do
  if  [[ $line == *-*-* ]] ; then
    prefix=$(echo $line)
   fi
  if  ( [[ $line == *:*C\ * ]] || [[ $line == *:*W\ * ]] ) ; then
    key=$(echo $line|cut -d":" -f1|sed s/\ //|sed s/\ //)
    values=$(echo $line|cut -d":" -f2)
    value=$(echo $values|cut -d" " -f1|tr -d "°C():;+,=-")
    high=$(echo $values|cut -d"h" -f2-10|cut -d" " -f3|tr -d "°C():;+,=-")
    crit=$(echo $values|cut -d"r" -f2-10|cut -d" " -f3|tr -d "°C():;+,=-")
    if ( [[ $key == *power* ]] || [[ $key == *pwr* ]] ) ; then #TDP values are tight!
      high=$( bc <<< "$high + 10")
      crit=$( bc <<< "$crit + 10")
     fi
    # fallback values
    if [[ $high != *"."* ]] || [[ $high == "0.0" ]]; then
      high=100
     fi
    if [[ $crit != *"."* ]] || [[ $crit == "0.0" ]]; then
      crit=120
     fi
    temper="$temper$prefix-$key=$value;0.1:$high;0.1:$crit|"
   fi
 done <$TFILE
rm $TFILE
echo $(echo $temper|sed 's/|$//')

# QEMU-VMs
if which qm >/dev/null ; then
    px_version=$(pveversion);
    pvetfile="/tmp/$(basename $0).$$.tmp"
    qm list > $pvetfile
    px_vms_sum=$(($(cat $pvetfile|wc -l)-1));
    px_vms_stopped=$(cat $pvetfile|grep -c stopped);
    px_vms_started=$(cat $pvetfile|grep -c running);
    echo "0 Proxmox_Version Version=$px_version;"
    echo "0 Proxmox_VMs Started=$px_vms_started|Stopped=$px_vms_stopped|Gesamt=$px_vms_sum; $px_vms_started von $px_vms_sum VMs laufen"
    cat $pvetfile | grep -v VMID | while read L
    do
        PID=$(echo $L | awk -- '{print $6}')
        if [ $PID -gt 0 ]; then
            DATA=$(top -p $PID -n 1 -b | tail -n 1 |awk -- '{print $5" "$6" "$7" "$9" "$10}')
        else
            DATA=""
        fi
       # echo $L" "$DATA
    done
    rm $pvetfile;
fi
